#!/usr/bin/python

import os
import argparse
from pathlib import Path
import subprocess

# TODO: Add location based sensing. Starting point: geocoder.ip('me').latlng

HOME = Path.home()

DOTFILES = os.path.join(HOME, 'dotfiles')

HYPRDOTS = os.path.join(DOTFILES, 'hypr', '.config', 'hypr')

MONITORSCONF = os.path.join(HYPRDOTS, 'monitors.conf')

HEADER_LINE = '# Active MultiMonitor Setup\n'
OFFICE_CONFIG = 'source = ~/.config/hypr/monitors_office.conf # WORK Monitors'
HOME_CONFIG = 'source = ~/.config/hypr/monitors_home.conf # HOME Monitors'

HOME_MONITOR_WORKSPACE_FIX_SCRIPT = "~/my-scripts/fixmonitor_home.sh"
OFFICE_MONITOR_WORKSPACE_FIX_SCRIPT = "~/my-scripts/fixmonitor_office.sh"

# Utils

def write_config(content):
    with open(MONITORSCONF, 'w') as f:
        f.write(content)


def locate_config():
    if not os.path.exists(MONITORSCONF):
        write_config(HEADER_LINE)

        print('monitors.conf was not found...\n so created', MONITORSCONF)

def reset_workspaces():
    """Reset all workspace assignments to avoid conflicts."""
    subprocess.run(["hyprctl", "--batch", " ".join([f"dispatch moveworkspacetomonitor {i} reset;" for i in range(1, 11)])])

# Config Setters

def activate_home():
    locate_config()
    content = '\n'.join([HEADER_LINE, HOME_CONFIG])
    write_config(content)
    subprocess.run(HOME_MONITOR_WORKSPACE_FIX_SCRIPT)
    print('Activated Home Monitor Setup')


def activate_office():
    locate_config()
    content = '\n'.join([HEADER_LINE, OFFICE_CONFIG])
    write_config(content)
    subprocess.run(OFFICE_MONITOR_WORKSPACE_FIX_SCRIPT)

    print('Activated OFFICE Monitor Setup')


def main():
    parser = argparse.ArgumentParser(description='Simple script to setup active monitor setup for hyprland')
    parser.add_argument('room', metavar='room', type=str, help='Which room you are at? Offce or Home')
    args = parser.parse_args()
    room = args.room

    reset_workspaces()
    if room.lower() in ['home', 'h']:
        activate_home()

    elif room.lower() in ['office', 'o', 'work', 'w']:
        activate_office()
    else:
        print('Invalid option... Should be Home or Office')


if __name__ == "__main__":
    main()
